// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.*;
import java.util.Set;
import java.util.HashSet;
import frc.robot.Robot;
import frc.robot.subsystems.Intake;


/**
 *
 */
public class IntakeCommand implements Command{
    double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, x;
    protected boolean isFrontPressed, isBackPressed;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    @Override
    public Set<Subsystem> getRequirements() {
        // TODO Auto-generated method stub
        Set<Subsystem> s = new HashSet<Subsystem>(){{
            add(new Intake());
        }};
        return s;
    }

    // Called just before this Command runs the first time
    @Override
    public void initialize() {
        kP = 0.09; 
        kI = 1e-4;
        kD = 0.1; 
        kIz = 0; 
        kFF = 0; 
        kMaxOutput = 1; 
        kMinOutput = -1;

        Robot.intake.intakePID.setP(kP);
        Robot.intake.intakePID.setI(kI);
        Robot.intake.intakePID.setD(kD);
        Robot.intake.intakePID.setIZone(kIz);
        Robot.intake.intakePID.setFF(kFF);
        Robot.intake.intakePID.setOutputRange(kMinOutput, kMaxOutput);

        Robot.intake.intakeMotor.set(0);
        isFrontPressed = false;
        isBackPressed = false;
        System.out.println("Intake Initialized");
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    public void execute() {

        if(Robot.oi.joystick.getRawButtonPressed(8)) {
            isFrontPressed = true;
        }
        if(Robot.oi.joystick.getRawButtonPressed(7)) {
            isBackPressed = true;
        }

        while(isFrontPressed) {
            Robot.intake.intakeMotor.set(.5);
            if(Robot.oi.joystick.getRawButtonPressed(8)) {
                isFrontPressed = false;
            }
        }

        while(isBackPressed) {
            Robot.intake.intakeMotor.set(-.5);
            if(Robot.oi.joystick.getRawButtonPressed(7)) {
                isBackPressed = false;
            }
        }
        Robot.intake.intakeMotor.set(0);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    public boolean isFinished() {
        return false;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
}