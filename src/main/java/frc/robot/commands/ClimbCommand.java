// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;

public class ClimbCommand extends Command {
    double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, x;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    
    public ClimbCommand() {
        requires(Robot.climb);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        kP = 0.09; 
        kI = 1e-4;
        kD = 0.1; 
        kIz = 0; 
        kFF = 0; 
        kMaxOutput = 1; 
        kMinOutput = -1;

        Robot.climb.climbPID.setP(kP);
        Robot.climb.climbPID.setI(kI);
        Robot.climb.climbPID.setD(kD);
        Robot.climb.climbPID.setIZone(kIz);
        Robot.climb.climbPID.setFF(kFF);
        Robot.climb.climbPID.setOutputRange(kMinOutput, kMaxOutput);

        Robot.climb.climbMotor.set(0);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        boolean pressed = false;
        boolean reversePressed = false;
        if(Robot.oi.joystick.getRawButtonPressed(11)){
            Robot.climb.climbMotor.setInverted(true);
            Robot.climb.climbMotor.set(5);
            reversePressed  = true;
        }
        //Temporary ugly code, turned them into toggle switches for testing individually.

        while(reversePressed){
            Robot.climb.climbMotor.set(.5);
            if(Robot.oi.joystick.getRawButtonPressed(10)) {
                reversePressed = false;
             }
          
        }

          if(Robot.oi.joystick.getRawButtonPressed(10)){
            Robot.climb.climbMotor.setInverted(false);
            Robot.climb.climbMotor.set(5);
            pressed = true;
            
          }

          while(pressed){
            Robot.climb.climbMotor.set(.5);
            if(Robot.oi.joystick.getRawButtonPressed(10)) {
                pressed = false;
             }
        }
        Robot.climb.climbMotor.set(0);

        }
    

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
